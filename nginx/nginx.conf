worker_processes 1;
error_log stderr;
pid /var/run/nginx.pid;

env REDIS_HOST;

events {
    worker_connections 1024;
}

http {
    # resolver 127.0.0.11;  # 如果使用 Docker 的內建 DNS 解析器

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /dev/stdout main;
    error_log /dev/stderr debug;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_shared_dict my_cache 10m;

    server {
        listen       80;
        server_name  localhost;

        types {
            text/html                             html;
            text/css                              css;
            application/javascript                js;
            application/json                      json;
            image/png                             png;
            image/jpeg                            jpeg jpg;
            image/gif                             gif;
            image/svg+xml                         svg;
            font/woff                             woff;
            font/woff2                            woff2;
            application/x-font-ttf                ttf;
            application/vnd.ms-fontobject         eot;
            application/xml                       xml;
            application/rss+xml                   rss;
        }

        gzip_http_version 1.0;
        gzip on;
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
        
        location = / {
            root   html;
            index  index.html index.htm;
        }

        location = /check {
            return 200 'OK';
            add_header Content-Type text/plain;
        }

        location /lua-test {
            default_type 'text/plain';
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 second

                local redis_host = os.getenv("REDIS_HOST")
                if not redis_host then
                    ngx.say("REDIS_HOST environment variable not set")
                    return
                end

                local ok, err = red:connect(redis_host, 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                local res, err = red:get("my_key")
                if not res then
                    ngx.say("failed to get my_key: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("my_key not found")
                    return
                end

                ngx.say("my_key: ", res)
            }
        }
    }
}